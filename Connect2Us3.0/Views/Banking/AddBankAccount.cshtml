@model book2us.Models.BankAccount

@{
    ViewBag.Title = "Add Bank Account";
}

<h2>Add Bank Account</h2>

<div class="add-bank-account-container">
    <div class="form-header">
        <h4>Enter Your Bank Account Details</h4>
        <p class="text-muted">Please provide accurate information for secure transactions</p>
    </div>

    @using (Html.BeginForm("AddBankAccount", "Banking", FormMethod.Post, new { @class = "bank-account-form", id = "addBankAccountForm" }))
    {
        @Html.AntiForgeryToken()

        if (ViewData.ModelState.Any(x => x.Value.Errors.Any()))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="fas fa-exclamation-circle"></i> Please correct the following errors:
                @Html.ValidationSummary(false, "", new { @class = "mt-2" })
                <button type="button" class="close" data-dismiss="alert">
                    <span>&times;</span>
                </button>
            </div>
        }

        <div class="form-section">
            <h5><i class="fas fa-university"></i> Bank Information</h5>
            
            <div class="form-group">
                @Html.LabelFor(m => m.BankName, new { @class = "form-label required" })
                @Html.TextBoxFor(m => m.BankName, new { @class = "form-control", placeholder = "Enter your bank name" })
                @Html.ValidationMessageFor(m => m.BankName, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.AccountHolderName, new { @class = "form-label required" })
                @Html.TextBoxFor(m => m.AccountHolderName, new { @class = "form-control", placeholder = "Enter account holder name as it appears on your account" })
                @Html.ValidationMessageFor(m => m.AccountHolderName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-section">
            <h5><i class="fas fa-credit-card"></i> Account Details</h5>
            
            <div class="form-row">
                <div class="form-group col-md-6">
                    @Html.LabelFor(m => m.AccountNumber, new { @class = "form-label required" })
                    @Html.TextBoxFor(m => m.AccountNumber, new { @class = "form-control", placeholder = "Enter account number", maxlength = "17" })
                    @Html.ValidationMessageFor(m => m.AccountNumber, "", new { @class = "text-danger" })
                </div>
                
                <div class="form-group col-md-6">
                    @Html.LabelFor(m => m.RoutingNumber, new { @class = "form-label required" })
                    @Html.TextBoxFor(m => m.RoutingNumber, new { @class = "form-control", placeholder = "Enter routing number", maxlength = "9" })
                    @Html.ValidationMessageFor(m => m.RoutingNumber, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.AccountType, new { @class = "form-label required" })
                <div class="account-type-selector">
                    <label class="account-type-option">
                        @Html.RadioButtonFor(m => m.AccountType, "Checking", new { @class = "form-check-input" })
                        <span class="option-label">
                            <i class="fas fa-money-check-alt"></i>
                            <strong>Checking Account</strong>
                            <small>For everyday transactions</small>
                        </span>
                    </label>
                    <label class="account-type-option">
                        @Html.RadioButtonFor(m => m.AccountType, "Savings", new { @class = "form-check-input" })
                        <span class="option-label">
                            <i class="fas fa-piggy-bank"></i>
                            <strong>Savings Account</strong>
                            <small>For saving and earning interest</small>
                        </span>
                    </label>
                </div>
                @Html.ValidationMessageFor(m => m.AccountType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-section">
            <h5><i class="fas fa-shield-alt"></i> Security & Terms</h5>
            
            <div class="security-notice">
                <div class="notice-icon">
                    <i class="fas fa-lock"></i>
                </div>
                <div class="notice-content">
                    <h6>Your Information is Secure</h6>
                    <p>Your bank account details are encrypted and stored securely. We use bank-level security measures to protect your information.</p>
                </div>
            </div>

            <div class="form-group">
                <label class="terms-checkbox">
                    <input type="checkbox" id="termsAccepted" name="termsAccepted" required>
                    <span class="checkmark"></span>
                    I agree to the <a href="#" target="_blank">Terms of Service</a> and <a href="#" target="_blank">Privacy Policy</a>
                </label>
            </div>
        </div>

        <div class="form-actions">
            <a href="@Url.Action("BankAccounts", "Banking")" class="btn btn-outline-secondary">
                <i class="fas fa-times"></i> Cancel
            </a>
            <button type="submit" class="btn btn-primary" id="submitBtn">
                <i class="fas fa-save"></i> Add Bank Account
            </button>
        </div>
    }
</div>

<style>
    .add-bank-account-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .form-header {
        text-align: center;
        margin-bottom: 30px;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 10px;
    }

    .form-section {
        background-color: #ffffff;
        border-radius: 10px;
        padding: 25px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .form-section h5 {
        color: #495057;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 2px solid #e9ecef;
    }

    .form-label.required::after {
        content: " *";
        color: #dc3545;
    }

    .account-type-selector {
        display: flex;
        gap: 20px;
        margin-top: 10px;
    }

    .account-type-option {
        flex: 1;
        display: flex;
        align-items: center;
        padding: 15px;
        border: 2px solid #e9ecef;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.3s ease;
        background-color: #f8f9fa;
    }

    .account-type-option:hover {
        border-color: #007bff;
        background-color: #e3f2fd;
    }

    .account-type-option input[type="radio"]:checked + .option-label {
        border-color: #007bff;
        background-color: #e3f2fd;
    }

    .account-type-option input[type="radio"] {
        margin-right: 10px;
    }

    .option-label {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        gap: 5px;
        flex: 1;
    }

    .option-label i {
        font-size: 2em;
        color: #007bff;
        margin-bottom: 5px;
    }

    .option-label strong {
        font-size: 1.1em;
        color: #495057;
    }

    .option-label small {
        color: #6c757d;
        font-size: 0.9em;
    }

    .security-notice {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 10px;
        color: white;
        margin-bottom: 20px;
    }

    .notice-icon {
        font-size: 2em;
        background-color: rgba(255,255,255,0.2);
        padding: 15px;
        border-radius: 50%;
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .notice-content h6 {
        margin: 0 0 5px 0;
        font-weight: bold;
    }

    .notice-content p {
        margin: 0;
        opacity: 0.9;
    }

    .terms-checkbox {
        display: flex;
        align-items: center;
        gap: 10px;
        cursor: pointer;
        font-weight: normal;
    }

    .terms-checkbox input[type="checkbox"] {
        width: 18px;
        height: 18px;
    }

    .form-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 30px;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 10px;
    }

    .btn {
        padding: 10px 20px;
        font-weight: 500;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        color: white;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
    }

    .btn-outline-secondary {
        border: 2px solid #6c757d;
        color: #6c757d;
    }

    .btn-outline-secondary:hover {
        background-color: #6c757d;
        color: white;
    }

    .text-danger {
        font-size: 0.9em;
        margin-top: 5px;
    }

    @media (max-width: 768px) {
        .account-type-selector {
            flex-direction: column;
        }

        .form-actions {
            flex-direction: column;
            gap: 15px;
        }

        .security-notice {
            flex-direction: column;
            text-align: center;
        }

        .form-row {
            flex-direction: column;
        }
    }
</style>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    
    <script>
        $(document).ready(function() {
            // Account number formatting
            $('#AccountNumber').on('input', function() {
                let value = $(this).val().replace(/\D/g, '');
                $(this).val(value);
            });

            // Routing number formatting
            $('#RoutingNumber').on('input', function() {
                let value = $(this).val().replace(/\D/g, '');
                $(this).val(value);
            });

            // Form validation enhancement
            $('#addBankAccountForm').on('submit', function(e) {
                if (!$('#termsAccepted').is(':checked')) {
                    e.preventDefault();
                    alert('Please accept the terms and conditions to continue.');
                    return false;
                }

                // Additional validation
                let accountNumber = $('#AccountNumber').val().replace(/\D/g, '');
                let routingNumber = $('#RoutingNumber').val().replace(/\D/g, '');

                if (accountNumber.length < 8 || accountNumber.length > 17) {
                    e.preventDefault();
                    alert('Account number must be between 8 and 17 digits.');
                    return false;
                }

                if (routingNumber.length !== 9) {
                    e.preventDefault();
                    alert('Routing number must be exactly 9 digits.');
                    return false;
                }

                $('#submitBtn').prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Processing...');
            });

            // Account type selection enhancement
            $('.account-type-option').click(function() {
                $(this).find('input[type="radio"]').prop('checked', true);
                $('.account-type-option').removeClass('selected');
                $(this).addClass('selected');
            });
        });
    </script>
}